---
- name: Setup AWS CICD stack
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Import VPC setup output variables
      ansible.builtin.include_vars: vars/output_vars

    - name: Import aws cicd ami setup variables
      ansible.builtin.include_vars: vars/aws-stack-setup

    - name: Import Import VPC setup variables
      ansible.builtin.include_vars: vars/vpc_setup

    - name: Create aws-cicd-stack key pair
      amazon.aws.ec2_key:
        name: awsstack
        region: "{{ region }}"
      register: key_out
    
    - name: Save private key in file awscicd-key.pem
      ansible.builtin.copy:
        content: "{{ key_out.key.private_key }}"
        dest: "./awsstack.pem"
        mode: 0400
      when: key_out.changed

    - name: Create Security Group for Load Balancer
      amazon.aws.ec2_group:
        name: awsELB-SG
        description: Allow port 80 from anywhere IPv4
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        tags:
          Name: "awsELB-SG"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: awsELBSG_out

    - name: Create Security Group for AWS CICD stack
      amazon.aws.ec2_group:
        name: awscicdstack-SG
        description: Allow port 22 from bastion-host SG and port 80 anywhere IPv4 awsELB-SG
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        tags:
          Name: "awscicdstack-SG"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
          
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ awsELBSG_out.group_id }}"
      register: awscicdstack_out

    - name: Update awscicdstack-SG to talk to its own security group
      amazon.aws.ec2_group:
        name: awscicdstack-SG
        description: Allow all port to communicate within this group.
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ awscicdstack_out.group_id }}"
    
    - name: Creating Nginx web01
      amazon.aws.ec2_instance:
        name: web01
        key_name: awsstack
        image_id: "{{ ngnix_ami }}"
        instance_type: t2.micro
        exact_count: 1
        region: "{{ region }}"
        security_group: "{{ awscicdstack_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
        wait: yes
        tags:
          Name: "web01"
          Project: ansible-awsstack
          Owner: Devops Team

    - name: Gather information about web01 instance
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": web01
      register: web01_out

    - name: Creating Tomcat app01
      amazon.aws.ec2_instance:
        name: app01
        key_name: awsstack
        image_id: "{{ tomcat_ami }}"
        instance_type: t2.micro
        exact_count: 1
        region: "{{ region }}"
        security_group: "{{ awscicdstack_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
        wait: yes
        tags:
          Name: "app01"
          Project: ansible-awsstack
          Owner: Devops Team
    
    - name: Gather information about app01 instance
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": app01
      register: app01_out

    - name: Creating memcached1 mc01
      amazon.aws.ec2_instance:
        name: mc01
        key_name: awsstack
        image_id: "{{ memcached_ami }}"
        instance_type: t2.micro
        exact_count: 1
        region: "{{ region }}"
        security_group: "{{ awscicdstack_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
        wait: yes
        tags:
          Name: "mc01"
          Project: ansible-awsstack
          Owner: Devops Team
    
    - name: Gather information about mc01 instance
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": mc01
      register: mc01_out
    
    - name: Creating RabbitmQ rmq01
      amazon.aws.ec2_instance:
        name: rmq01
        key_name: awsstack
        image_id: "{{ rmq_ami }}"
        instance_type: t2.micro
        exact_count: 1
        region: "{{ region }}"
        security_group: "{{ awscicdstack_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
        wait: yes
        tags:
          Name: "rmq01"
          Project: ansible-awsstack
          Owner: Devops Team

    - name: Gather information about rmq01 instance
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": rmq01
      register: rmq01_out

    - name: Creating MySql db01
      amazon.aws.ec2_instance:
        name: db01
        key_name: awsstack
        image_id: "{{ db_ami }}"
        instance_type: t2.micro
        exact_count: 1
        region: "{{ region }}"
        security_group: "{{ awscicdstack_out.group_id }}"
        vpc_subnet_id: "{{ privsub1id }}"
        wait: yes
        tags:
          Name: "db01"
          Project: ansible-awsstack
          Owner: Devops Team

    - name: Gather information about db01 instance
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": db01
      register: db01_out

    - ansible.builtin.debug:
        var: web01_out.instances.instance_id
    
    - name: create Elastic Load Balancer
      amazon.aws.elb_classic_lb:
        name: "aws-cicd-elb"
        state: "{{ state }}"
        region: "{{ region }}"
        instance_ids: 
          - "{{ web01_out.instances.instance_id }}"
        purge_instances_ids: true
        security_group_ids: 
          - "{{ awsELBSG_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
    
    - name: Insert/Update host IP's and name in file provision-stack/group_vars/hostsip
      ansible.builtin.blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.instances.private_ip_address }}
          app01_ip: {{ app01_out.instances.private_ip_address }}
          mc01_ip: {{ mc01_out.instances.private_ip_address }}
          rmq01_ip: {{ rmq01_out.instances.private_ip_address }}
          db01_ip: {{ db01_out.instances.private_ip_address }}
    
    - name: Copy login key to provision-stack directory
      ansible.builtin.copy:
        src: awsstack.pem
        dest: provision-stack/awsstack.pem
        mode: 0400

    - name: Insert/Update host IP's and name in file provision-stack/group_vars/hostsip
      ansible.builtin.blockinfile:
        path: provision-stack/inventory-awscicdstack
        block: |
          web01_ip: {{ web01_out.instances.private_ip_address }}
          app01_ip: {{ app01_out.instances.private_ip_address }}
          mc01_ip: {{ mc01_out.instances.private_ip_address }}
          rmq01_ip: {{ rmq01_out.instances.private_ip_address }}
          db01_ip: {{ db01_out.instances.private_ip_address }}
          controller ansible_host: 127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [mcsrvgrp]
          mc01

          [rmqsrvgrp]
          rmq01

          [dbsrvgrp]
          db01

          [control]
          controller

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          mcsrvgrp
          rmqsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=awscicd.pem
          #ansible_python_interpreter=usr/bin/python3





    
